from Base import all
import Image.Data.Color.Internal

type Channel_Not_Exist channel

type Unsupported_Channels_Number n

type Color

    type Channels_1 channel_1
    type Channels_2 channel_1 channel_2
    type Channels_3 channel_1 channel_2 channel_3
    type Channels_4 channel_1 channel_2 channel_3 channel_4

    to_vector : Vector
    to_vector = case this of
        Channels_1 c1 -> [c1]
        Channels_2 c1 c2 -> [c1, c2]
        Channels_3 c1 c2 c3 -> [c1, c2, c3]
        Channels_4 c1 c2 c3 c4 -> [c1, c2, c3, c4]

    channels_number : Integer
    channels_number = case this of
        Channels_1 _ -> 1
        Channels_2 _ _ -> 2
        Channels_3 _ _ _ -> 3
        Channels_4 _ _ _ _ -> 4

    blue : Number ! Channel_Not_Exist
    blue = case this of
        Channels_3 b _ _ -> b
        Channels_4 b _ _ _ -> b
        _ -> Error.throw (Channel_Not_Exist 'blue')

    green : Number ! Channel_Not_Exist
    green = case this of
        Channels_3 _ g _ -> g
        Channels_4 _ g _ _ -> g
        _ -> Error.throw (Channel_Not_Exist 'green')

    red : Number ! Channel_Not_Exist
    red = case this of
        Channels_3 _ _ r -> r
        Channels_4 _ _ r _ -> r
        _ -> Error.throw (Channel_Not_Exist 'red')

    alpha : Number ! Channel_Not_Exist
    alpha = case this of
        Channels_4 _ _ _ a -> a
        _ -> Error.throw (Channel_Not_Exist 'alpha')

    zip : Vector -> (Any -> Any -> Any) -> Color
    zip mask f = here.from_vector (this.to_vector.zip_1 mask f)

    copy : Number -> Number -> Number -> Number -> Channel
    copy channel_1=Nothing channel_2=Nothing channel_3=Nothing channel_4=Nothing =
        case this of
            Channels_1 _ ->
                if channel_1 == Nothing then this else Channels_1 channel_1
            Channels_2 c1 c2 ->
                new_c1 = if channel_1 == Nothing then c1 else channel_1
                new_c2 = if channel_2 == Nothing then c2 else channel_2
                Channels_2 new_c1 new_c2
            Channels_3 c1 c2 c3 ->
                new_c1 = if channel_1 == Nothing then c1 else channel_1
                new_c2 = if channel_2 == Nothing then c2 else channel_2
                new_c3 = if channel_3 == Nothing then c3 else channel_3
                Channels_3 new_c1 new_c2 new_c3
            Channels_4 c1 c2 c3 c4 ->
                new_c1 = if channel_1 == Nothing then c1 else channel_1
                new_c2 = if channel_2 == Nothing then c2 else channel_2
                new_c3 = if channel_3 == Nothing then c3 else channel_3
                new_c4 = if channel_4 == Nothing then c4 else channel_4
                Channels_4 new_c1 new_c2 new_c3 new_c4

    + : (Number | Vector) -> Color
    + value = case value of
        Vector.Vector _ -> this.zip value (+)
        _ -> Internal.add this value

    - : (Number | Vector) -> Color
    - value = case value of
        Vector.Vector _ -> this.zip value (-)
        _ -> Internal.subtract this value

    * : (Number | Vector) -> Color
    * value = case value of
        Vector.Vector _ -> this.zip value (*)
        _ -> Internal.multiply this value

    / : (Number | Vector) -> Color
    / value = case value of
        Vector.Vector _ -> this.zip value (/)
        _ -> Internal.divide this value

from_vector : Vector -> Color ! Unsupported_Channels_Number
from_vector vec = here.from_array vec.to_array

from_array : Array -> Color ! Unsupported_Channels_Number
from_array arr =
    if arr.length == 1 then Channels_1 (arr.at 0) else
        if arr.length == 2 then Channels_2 (arr.at 0) (arr.at 1) else
            if arr.length == 3 then Channels_3 (arr.at 0) (arr.at 1) (arr.at 2) else
                if arr.length == 4 then Channels_4 (arr.at 0) (arr.at 1) (arr.at 2) (arr.at 3) else
                    Error.throw (Unsupported_Channels_Number arr.length)
